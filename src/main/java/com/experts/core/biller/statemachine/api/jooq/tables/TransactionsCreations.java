/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.TransactionsCreationsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsCreations extends TableImpl<TransactionsCreationsRecord> {

    private static final long serialVersionUID = -1529446980;

    /**
     * The reference instance of <code>public.transactions_creations</code>
     */
    public static final TransactionsCreations TRANSACTIONS_CREATIONS = new TransactionsCreations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsCreationsRecord> getRecordType() {
        return TransactionsCreationsRecord.class;
    }

    /**
     * The column <code>public.transactions_creations.id</code>.
     */
    public final TableField<TransactionsCreationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.createddate</code>.
     */
    public final TableField<TransactionsCreationsRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactions_creations.lastmodifiedby</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactions_creations.modifieddate</code>.
     */
    public final TableField<TransactionsCreationsRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactions_creations.username</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactions_creations.creation_date</code>.
     */
    public final TableField<TransactionsCreationsRecord, Timestamp> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.description</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactions_creations.exception_date</code>.
     */
    public final TableField<TransactionsCreationsRecord, Timestamp> EXCEPTION_DATE = createField("exception_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactions_creations.success</code>.
     */
    public final TableField<TransactionsCreationsRecord, Boolean> SUCCESS = createField("success", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.request</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> REQUEST = createField("request", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.response</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> RESPONSE = createField("response", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.serial_no</code>.
     */
    public final TableField<TransactionsCreationsRecord, String> SERIAL_NO = createField("serial_no", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.op_type</code>.
     */
    public final TableField<TransactionsCreationsRecord, Integer> OP_TYPE = createField("op_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transactions_creations.version</code>.
     */
    public final TableField<TransactionsCreationsRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.transactions_creations</code> table reference
     */
    public TransactionsCreations() {
        this(DSL.name("transactions_creations"), null);
    }

    /**
     * Create an aliased <code>public.transactions_creations</code> table reference
     */
    public TransactionsCreations(String alias) {
        this(DSL.name(alias), TRANSACTIONS_CREATIONS);
    }

    /**
     * Create an aliased <code>public.transactions_creations</code> table reference
     */
    public TransactionsCreations(Name alias) {
        this(alias, TRANSACTIONS_CREATIONS);
    }

    private TransactionsCreations(Name alias, Table<TransactionsCreationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionsCreations(Name alias, Table<TransactionsCreationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionsCreations(Table<O> child, ForeignKey<O, TransactionsCreationsRecord> key) {
        super(child, key, TRANSACTIONS_CREATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTIONS_CREATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionsCreationsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_CREATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionsCreationsRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionsCreationsRecord>>asList(Keys.TRANSACTIONS_CREATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsCreations as(String alias) {
        return new TransactionsCreations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsCreations as(Name alias) {
        return new TransactionsCreations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsCreations rename(String name) {
        return new TransactionsCreations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsCreations rename(Name name) {
        return new TransactionsCreations(name, null);
    }
}
