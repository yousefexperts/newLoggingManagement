/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.TransactionQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionQueue extends TableImpl<TransactionQueueRecord> {

    private static final long serialVersionUID = -549242085;

    /**
     * The reference instance of <code>public.transaction_queue</code>
     */
    public static final TransactionQueue TRANSACTION_QUEUE = new TransactionQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionQueueRecord> getRecordType() {
        return TransactionQueueRecord.class;
    }

    /**
     * The column <code>public.transaction_queue.id</code>.
     */
    public final TableField<TransactionQueueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_queue.createddate</code>.
     */
    public final TableField<TransactionQueueRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transaction_queue.lastmodifiedby</code>.
     */
    public final TableField<TransactionQueueRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_queue.modifieddate</code>.
     */
    public final TableField<TransactionQueueRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transaction_queue.username</code>.
     */
    public final TableField<TransactionQueueRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_queue.create_date</code>.
     */
    public final TableField<TransactionQueueRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.transaction_queue.success</code>.
     */
    public final TableField<TransactionQueueRecord, Boolean> SUCCESS = createField("success", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.transaction_queue.version</code>.
     */
    public final TableField<TransactionQueueRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transaction_queue.transaction_id</code>.
     */
    public final TableField<TransactionQueueRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.transaction_queue</code> table reference
     */
    public TransactionQueue() {
        this(DSL.name("transaction_queue"), null);
    }

    /**
     * Create an aliased <code>public.transaction_queue</code> table reference
     */
    public TransactionQueue(String alias) {
        this(DSL.name(alias), TRANSACTION_QUEUE);
    }

    /**
     * Create an aliased <code>public.transaction_queue</code> table reference
     */
    public TransactionQueue(Name alias) {
        this(alias, TRANSACTION_QUEUE);
    }

    private TransactionQueue(Name alias, Table<TransactionQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionQueue(Name alias, Table<TransactionQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionQueue(Table<O> child, ForeignKey<O, TransactionQueueRecord> key) {
        super(child, key, TRANSACTION_QUEUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTION_QUEUE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionQueueRecord> getPrimaryKey() {
        return Keys.TRANSACTION_QUEUE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionQueueRecord>>asList(Keys.TRANSACTION_QUEUE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionQueueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionQueueRecord, ?>>asList(Keys.TRANSACTION_QUEUE__FKJY43FMG5DHAYMUA9SA7RCE355);
    }

    public TransactionsCreations transactionsCreations() {
        return new TransactionsCreations(this, Keys.TRANSACTION_QUEUE__FKJY43FMG5DHAYMUA9SA7RCE355);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionQueue as(String alias) {
        return new TransactionQueue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionQueue as(Name alias) {
        return new TransactionQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionQueue rename(String name) {
        return new TransactionQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionQueue rename(Name name) {
        return new TransactionQueue(name, null);
    }
}
