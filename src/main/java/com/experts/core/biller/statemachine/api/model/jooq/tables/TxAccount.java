/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.model.jooq.tables;


import com.experts.core.biller.statemachine.api.model.jooq.Indexes;
import com.experts.core.biller.statemachine.api.model.jooq.Keys;
import com.experts.core.biller.statemachine.api.model.jooq.Public;
import com.experts.core.biller.statemachine.api.model.jooq.tables.records.TxAccountRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxAccount extends TableImpl<TxAccountRecord> {

    private static final long serialVersionUID = -159104059;

    /**
     * The reference instance of <code>public.tx_account</code>
     */
    public static final TxAccount TX_ACCOUNT = new TxAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxAccountRecord> getRecordType() {
        return TxAccountRecord.class;
    }

    /**
     * The column <code>public.tx_account.id</code>.
     */
    public final TableField<TxAccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tx_account.username</code>.
     */
    public final TableField<TxAccountRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.tx_account</code> table reference
     */
    public TxAccount() {
        this(DSL.name("tx_account"), null);
    }

    /**
     * Create an aliased <code>public.tx_account</code> table reference
     */
    public TxAccount(String alias) {
        this(DSL.name(alias), TX_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.tx_account</code> table reference
     */
    public TxAccount(Name alias) {
        this(alias, TX_ACCOUNT);
    }

    private TxAccount(Name alias, Table<TxAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxAccount(Name alias, Table<TxAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TxAccount(Table<O> child, ForeignKey<O, TxAccountRecord> key) {
        super(child, key, TX_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TX_ACCOUNT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TxAccountRecord> getPrimaryKey() {
        return Keys.TX_ACCOUNT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TxAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<TxAccountRecord>>asList(Keys.TX_ACCOUNT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxAccount as(String alias) {
        return new TxAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxAccount as(Name alias) {
        return new TxAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxAccount rename(String name) {
        return new TxAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxAccount rename(Name name) {
        return new TxAccount(name, null);
    }
}
