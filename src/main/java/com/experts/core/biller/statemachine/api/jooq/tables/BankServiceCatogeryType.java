/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.BankServiceCatogeryTypeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankServiceCatogeryType extends TableImpl<BankServiceCatogeryTypeRecord> {

    private static final long serialVersionUID = 64168167;

    /**
     * The reference instance of <code>public.bank_service_catogery_type</code>
     */
    public static final BankServiceCatogeryType BANK_SERVICE_CATOGERY_TYPE = new BankServiceCatogeryType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankServiceCatogeryTypeRecord> getRecordType() {
        return BankServiceCatogeryTypeRecord.class;
    }

    /**
     * The column <code>public.bank_service_catogery_type.id</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bank_service_catogery_type.createddate</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bank_service_catogery_type.lastmodifiedby</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_service_catogery_type.modifieddate</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bank_service_catogery_type.username</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_service_catogery_type.type</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.bank_service_catogery_type.version</code>.
     */
    public final TableField<BankServiceCatogeryTypeRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.bank_service_catogery_type</code> table reference
     */
    public BankServiceCatogeryType() {
        this(DSL.name("bank_service_catogery_type"), null);
    }

    /**
     * Create an aliased <code>public.bank_service_catogery_type</code> table reference
     */
    public BankServiceCatogeryType(String alias) {
        this(DSL.name(alias), BANK_SERVICE_CATOGERY_TYPE);
    }

    /**
     * Create an aliased <code>public.bank_service_catogery_type</code> table reference
     */
    public BankServiceCatogeryType(Name alias) {
        this(alias, BANK_SERVICE_CATOGERY_TYPE);
    }

    private BankServiceCatogeryType(Name alias, Table<BankServiceCatogeryTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankServiceCatogeryType(Name alias, Table<BankServiceCatogeryTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BankServiceCatogeryType(Table<O> child, ForeignKey<O, BankServiceCatogeryTypeRecord> key) {
        super(child, key, BANK_SERVICE_CATOGERY_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BANK_SERVICE_CATOGERY_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankServiceCatogeryTypeRecord> getPrimaryKey() {
        return Keys.BANK_SERVICE_CATOGERY_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankServiceCatogeryTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<BankServiceCatogeryTypeRecord>>asList(Keys.BANK_SERVICE_CATOGERY_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankServiceCatogeryType as(String alias) {
        return new BankServiceCatogeryType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankServiceCatogeryType as(Name alias) {
        return new BankServiceCatogeryType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankServiceCatogeryType rename(String name) {
        return new BankServiceCatogeryType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankServiceCatogeryType rename(Name name) {
        return new BankServiceCatogeryType(name, null);
    }
}
