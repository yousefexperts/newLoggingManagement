/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.ConfigurationBillerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigurationBiller extends TableImpl<ConfigurationBillerRecord> {

    private static final long serialVersionUID = 479009346;

    /**
     * The reference instance of <code>public.configuration_biller</code>
     */
    public static final ConfigurationBiller CONFIGURATION_BILLER = new ConfigurationBiller();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigurationBillerRecord> getRecordType() {
        return ConfigurationBillerRecord.class;
    }

    /**
     * The column <code>public.configuration_biller.id</code>.
     */
    public final TableField<ConfigurationBillerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.configuration_biller.createddate</code>.
     */
    public final TableField<ConfigurationBillerRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.configuration_biller.lastmodifiedby</code>.
     */
    public final TableField<ConfigurationBillerRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.configuration_biller.modifieddate</code>.
     */
    public final TableField<ConfigurationBillerRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.configuration_biller.username</code>.
     */
    public final TableField<ConfigurationBillerRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.configuration_biller.conf_dir</code>.
     */
    public final TableField<ConfigurationBillerRecord, String> CONF_DIR = createField("conf_dir", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.configuration_biller.conf_file</code>.
     */
    public final TableField<ConfigurationBillerRecord, String> CONF_FILE = createField("conf_file", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.configuration_biller.conf_name</code>.
     */
    public final TableField<ConfigurationBillerRecord, String> CONF_NAME = createField("conf_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.configuration_biller</code> table reference
     */
    public ConfigurationBiller() {
        this(DSL.name("configuration_biller"), null);
    }

    /**
     * Create an aliased <code>public.configuration_biller</code> table reference
     */
    public ConfigurationBiller(String alias) {
        this(DSL.name(alias), CONFIGURATION_BILLER);
    }

    /**
     * Create an aliased <code>public.configuration_biller</code> table reference
     */
    public ConfigurationBiller(Name alias) {
        this(alias, CONFIGURATION_BILLER);
    }

    private ConfigurationBiller(Name alias, Table<ConfigurationBillerRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConfigurationBiller(Name alias, Table<ConfigurationBillerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ConfigurationBiller(Table<O> child, ForeignKey<O, ConfigurationBillerRecord> key) {
        super(child, key, CONFIGURATION_BILLER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONFIGURATION_BILLER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConfigurationBillerRecord> getPrimaryKey() {
        return Keys.CONFIGURATION_BILLER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConfigurationBillerRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigurationBillerRecord>>asList(Keys.CONFIGURATION_BILLER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigurationBiller as(String alias) {
        return new ConfigurationBiller(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigurationBiller as(Name alias) {
        return new ConfigurationBiller(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigurationBiller rename(String name) {
        return new ConfigurationBiller(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigurationBiller rename(Name name) {
        return new ConfigurationBiller(name, null);
    }
}
