/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.SystemLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemLog extends TableImpl<SystemLogRecord> {

    private static final long serialVersionUID = -1725052120;

    /**
     * The reference instance of <code>public.system_log</code>
     */
    public static final SystemLog SYSTEM_LOG = new SystemLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemLogRecord> getRecordType() {
        return SystemLogRecord.class;
    }

    /**
     * The column <code>public.system_log.id</code>.
     */
    public final TableField<SystemLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.system_log.createddate</code>.
     */
    public final TableField<SystemLogRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.system_log.lastmodifiedby</code>.
     */
    public final TableField<SystemLogRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.system_log.modifieddate</code>.
     */
    public final TableField<SystemLogRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.system_log.username</code>.
     */
    public final TableField<SystemLogRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.system_log.exception</code>.
     */
    public final TableField<SystemLogRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.system_log.happend_date</code>.
     */
    public final TableField<SystemLogRecord, Timestamp> HAPPEND_DATE = createField("happend_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.system_log.message</code>.
     */
    public final TableField<SystemLogRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.system_log.name</code>.
     */
    public final TableField<SystemLogRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.system_log.version</code>.
     */
    public final TableField<SystemLogRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.system_log</code> table reference
     */
    public SystemLog() {
        this(DSL.name("system_log"), null);
    }

    /**
     * Create an aliased <code>public.system_log</code> table reference
     */
    public SystemLog(String alias) {
        this(DSL.name(alias), SYSTEM_LOG);
    }

    /**
     * Create an aliased <code>public.system_log</code> table reference
     */
    public SystemLog(Name alias) {
        this(alias, SYSTEM_LOG);
    }

    private SystemLog(Name alias, Table<SystemLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemLog(Name alias, Table<SystemLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SystemLog(Table<O> child, ForeignKey<O, SystemLogRecord> key) {
        super(child, key, SYSTEM_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYSTEM_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SystemLogRecord> getPrimaryKey() {
        return Keys.SYSTEM_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SystemLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemLogRecord>>asList(Keys.SYSTEM_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SystemLog as(String alias) {
        return new SystemLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SystemLog as(Name alias) {
        return new SystemLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemLog rename(String name) {
        return new SystemLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemLog rename(Name name) {
        return new SystemLog(name, null);
    }
}
