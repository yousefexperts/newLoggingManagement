/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.ProcessStateRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessState extends TableImpl<ProcessStateRecord> {

    private static final long serialVersionUID = -365366856;

    /**
     * The reference instance of <code>public.process_state</code>
     */
    public static final ProcessState PROCESS_STATE = new ProcessState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessStateRecord> getRecordType() {
        return ProcessStateRecord.class;
    }

    /**
     * The column <code>public.process_state.id</code>.
     */
    public final TableField<ProcessStateRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.process_state.createddate</code>.
     */
    public final TableField<ProcessStateRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.process_state.lastmodifiedby</code>.
     */
    public final TableField<ProcessStateRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.process_state.modifieddate</code>.
     */
    public final TableField<ProcessStateRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.process_state.username</code>.
     */
    public final TableField<ProcessStateRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.process_state.process_definition</code>.
     */
    public final TableField<ProcessStateRecord, String> PROCESS_DEFINITION = createField("process_definition", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.process_state.process_flow_id</code>.
     */
    public final TableField<ProcessStateRecord, String> PROCESS_FLOW_ID = createField("process_flow_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.process_state.process_flow_execution_id</code>.
     */
    public final TableField<ProcessStateRecord, String> PROCESS_FLOW_EXECUTION_ID = createField("process_flow_execution_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.process_state.process_name</code>.
     */
    public final TableField<ProcessStateRecord, String> PROCESS_NAME = createField("process_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.process_state.version</code>.
     */
    public final TableField<ProcessStateRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.process_state.state_id</code>.
     */
    public final TableField<ProcessStateRecord, Long> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.process_state</code> table reference
     */
    public ProcessState() {
        this(DSL.name("process_state"), null);
    }

    /**
     * Create an aliased <code>public.process_state</code> table reference
     */
    public ProcessState(String alias) {
        this(DSL.name(alias), PROCESS_STATE);
    }

    /**
     * Create an aliased <code>public.process_state</code> table reference
     */
    public ProcessState(Name alias) {
        this(alias, PROCESS_STATE);
    }

    private ProcessState(Name alias, Table<ProcessStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessState(Name alias, Table<ProcessStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProcessState(Table<O> child, ForeignKey<O, ProcessStateRecord> key) {
        super(child, key, PROCESS_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESS_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessStateRecord> getPrimaryKey() {
        return Keys.PROCESS_STATE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessStateRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessStateRecord>>asList(Keys.PROCESS_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProcessStateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProcessStateRecord, ?>>asList(Keys.PROCESS_STATE__FKGRJKPUOGO3E3JJ5V5TQFVL5Y1);
    }

    public PayState payState() {
        return new PayState(this, Keys.PROCESS_STATE__FKGRJKPUOGO3E3JJ5V5TQFVL5Y1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessState as(String alias) {
        return new ProcessState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessState as(Name alias) {
        return new ProcessState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessState rename(String name) {
        return new ProcessState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessState rename(Name name) {
        return new ProcessState(name, null);
    }
}
