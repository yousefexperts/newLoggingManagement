/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.model.jooq.tables;


import com.experts.core.biller.statemachine.api.model.jooq.Indexes;
import com.experts.core.biller.statemachine.api.model.jooq.Keys;
import com.experts.core.biller.statemachine.api.model.jooq.Public;
import com.experts.core.biller.statemachine.api.model.jooq.tables.records.PayStateRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayState extends TableImpl<PayStateRecord> {

    private static final long serialVersionUID = -293018794;

    /**
     * The reference instance of <code>public.pay_state</code>
     */
    public static final PayState PAY_STATE = new PayState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayStateRecord> getRecordType() {
        return PayStateRecord.class;
    }

    /**
     * The column <code>public.pay_state.id</code>.
     */
    public final TableField<PayStateRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_state.createddate</code>.
     */
    public final TableField<PayStateRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.pay_state.modifieddate</code>.
     */
    public final TableField<PayStateRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.pay_state.username</code>.
     */
    public final TableField<PayStateRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.pay_state.amount</code>.
     */
    public final TableField<PayStateRecord, String> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pay_state.bank_code</code>.
     */
    public final TableField<PayStateRecord, String> BANK_CODE = createField("bank_code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pay_state.currency</code>.
     */
    public final TableField<PayStateRecord, Integer> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pay_state.transaction</code>.
     */
    public final TableField<PayStateRecord, String> TRANSACTION = createField("transaction", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.pay_state.initial_state</code>.
     */
    public final TableField<PayStateRecord, Long> INITIAL_STATE = createField("initial_state", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.pay_state</code> table reference
     */
    public PayState() {
        this(DSL.name("pay_state"), null);
    }

    /**
     * Create an aliased <code>public.pay_state</code> table reference
     */
    public PayState(String alias) {
        this(DSL.name(alias), PAY_STATE);
    }

    /**
     * Create an aliased <code>public.pay_state</code> table reference
     */
    public PayState(Name alias) {
        this(alias, PAY_STATE);
    }

    private PayState(Name alias, Table<PayStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayState(Name alias, Table<PayStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PayState(Table<O> child, ForeignKey<O, PayStateRecord> key) {
        super(child, key, PAY_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAY_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PayStateRecord> getPrimaryKey() {
        return Keys.PAY_STATE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PayStateRecord>> getKeys() {
        return Arrays.<UniqueKey<PayStateRecord>>asList(Keys.PAY_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PayStateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayStateRecord, ?>>asList(Keys.PAY_STATE__FKNXDQFFU9M3X1R6C4UQ15Y9PQB);
    }

    public InitialState initialState() {
        return new InitialState(this, Keys.PAY_STATE__FKNXDQFFU9M3X1R6C4UQ15Y9PQB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PayState as(String alias) {
        return new PayState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PayState as(Name alias) {
        return new PayState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayState rename(String name) {
        return new PayState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayState rename(Name name) {
        return new PayState(name, null);
    }
}
