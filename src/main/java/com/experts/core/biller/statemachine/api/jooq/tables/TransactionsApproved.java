/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.TransactionsApprovedRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsApproved extends TableImpl<TransactionsApprovedRecord> {

    private static final long serialVersionUID = 649349258;

    /**
     * The reference instance of <code>public.transactions_approved</code>
     */
    public static final TransactionsApproved TRANSACTIONS_APPROVED = new TransactionsApproved();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsApprovedRecord> getRecordType() {
        return TransactionsApprovedRecord.class;
    }

    /**
     * The column <code>public.transactions_approved.id</code>.
     */
    public final TableField<TransactionsApprovedRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions_approved.createddate</code>.
     */
    public final TableField<TransactionsApprovedRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactions_approved.lastmodifiedby</code>.
     */
    public final TableField<TransactionsApprovedRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactions_approved.modifieddate</code>.
     */
    public final TableField<TransactionsApprovedRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactions_approved.username</code>.
     */
    public final TableField<TransactionsApprovedRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactions_approved.approved</code>.
     */
    public final TableField<TransactionsApprovedRecord, Boolean> APPROVED = createField("approved", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.transactions_approved.description</code>.
     */
    public final TableField<TransactionsApprovedRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transactions_approved.version</code>.
     */
    public final TableField<TransactionsApprovedRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transactions_approved.transaction_id</code>.
     */
    public final TableField<TransactionsApprovedRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.transactions_approved</code> table reference
     */
    public TransactionsApproved() {
        this(DSL.name("transactions_approved"), null);
    }

    /**
     * Create an aliased <code>public.transactions_approved</code> table reference
     */
    public TransactionsApproved(String alias) {
        this(DSL.name(alias), TRANSACTIONS_APPROVED);
    }

    /**
     * Create an aliased <code>public.transactions_approved</code> table reference
     */
    public TransactionsApproved(Name alias) {
        this(alias, TRANSACTIONS_APPROVED);
    }

    private TransactionsApproved(Name alias, Table<TransactionsApprovedRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionsApproved(Name alias, Table<TransactionsApprovedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionsApproved(Table<O> child, ForeignKey<O, TransactionsApprovedRecord> key) {
        super(child, key, TRANSACTIONS_APPROVED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTIONS_APPROVED_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionsApprovedRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_APPROVED_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionsApprovedRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionsApprovedRecord>>asList(Keys.TRANSACTIONS_APPROVED_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionsApprovedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionsApprovedRecord, ?>>asList(Keys.TRANSACTIONS_APPROVED__FKSKBPQWB9L7VN3NEPI8BICXMFL);
    }

    public TransactionsCreations transactionsCreations() {
        return new TransactionsCreations(this, Keys.TRANSACTIONS_APPROVED__FKSKBPQWB9L7VN3NEPI8BICXMFL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsApproved as(String alias) {
        return new TransactionsApproved(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsApproved as(Name alias) {
        return new TransactionsApproved(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsApproved rename(String name) {
        return new TransactionsApproved(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsApproved rename(Name name) {
        return new TransactionsApproved(name, null);
    }
}
