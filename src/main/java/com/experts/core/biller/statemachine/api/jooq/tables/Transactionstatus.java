/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.TransactionstatusRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactionstatus extends TableImpl<TransactionstatusRecord> {

    private static final long serialVersionUID = -1292452697;

    /**
     * The reference instance of <code>public.transactionstatus</code>
     */
    public static final Transactionstatus TRANSACTIONSTATUS = new Transactionstatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionstatusRecord> getRecordType() {
        return TransactionstatusRecord.class;
    }

    /**
     * The column <code>public.transactionstatus.id</code>.
     */
    public final TableField<TransactionstatusRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactionstatus.createddate</code>.
     */
    public final TableField<TransactionstatusRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactionstatus.lastmodifiedby</code>.
     */
    public final TableField<TransactionstatusRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactionstatus.modifieddate</code>.
     */
    public final TableField<TransactionstatusRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transactionstatus.username</code>.
     */
    public final TableField<TransactionstatusRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transactionstatus.status</code>.
     */
    public final TableField<TransactionstatusRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.transactionstatus</code> table reference
     */
    public Transactionstatus() {
        this(DSL.name("transactionstatus"), null);
    }

    /**
     * Create an aliased <code>public.transactionstatus</code> table reference
     */
    public Transactionstatus(String alias) {
        this(DSL.name(alias), TRANSACTIONSTATUS);
    }

    /**
     * Create an aliased <code>public.transactionstatus</code> table reference
     */
    public Transactionstatus(Name alias) {
        this(alias, TRANSACTIONSTATUS);
    }

    private Transactionstatus(Name alias, Table<TransactionstatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactionstatus(Name alias, Table<TransactionstatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transactionstatus(Table<O> child, ForeignKey<O, TransactionstatusRecord> key) {
        super(child, key, TRANSACTIONSTATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTIONSTATUS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionstatusRecord> getPrimaryKey() {
        return Keys.TRANSACTIONSTATUS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionstatusRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionstatusRecord>>asList(Keys.TRANSACTIONSTATUS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactionstatus as(String alias) {
        return new Transactionstatus(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactionstatus as(Name alias) {
        return new Transactionstatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactionstatus rename(String name) {
        return new Transactionstatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactionstatus rename(Name name) {
        return new Transactionstatus(name, null);
    }
}
