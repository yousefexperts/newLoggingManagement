/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.EmployeeDetailsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDetails extends TableImpl<EmployeeDetailsRecord> {

    private static final long serialVersionUID = 1970188823;

    /**
     * The reference instance of <code>public.employee_details</code>
     */
    public static final EmployeeDetails EMPLOYEE_DETAILS = new EmployeeDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeDetailsRecord> getRecordType() {
        return EmployeeDetailsRecord.class;
    }

    /**
     * The column <code>public.employee_details.id</code>.
     */
    public final TableField<EmployeeDetailsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.employee_details.createddate</code>.
     */
    public final TableField<EmployeeDetailsRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.employee_details.lastmodifiedby</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.employee_details.modifieddate</code>.
     */
    public final TableField<EmployeeDetailsRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.employee_details.username</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.employee_details.first_name</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.employee_details.full_name</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> FULL_NAME = createField("full_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.employee_details.blocked</code>.
     */
    public final TableField<EmployeeDetailsRecord, Boolean> BLOCKED = createField("blocked", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.employee_details.deleted</code>.
     */
    public final TableField<EmployeeDetailsRecord, Boolean> DELETED = createField("deleted", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.employee_details.password_expired</code>.
     */
    public final TableField<EmployeeDetailsRecord, Boolean> PASSWORD_EXPIRED = createField("password_expired", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.employee_details.second_name</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> SECOND_NAME = createField("second_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.employee_details.third_name</code>.
     */
    public final TableField<EmployeeDetailsRecord, String> THIRD_NAME = createField("third_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.employee_details.version</code>.
     */
    public final TableField<EmployeeDetailsRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.employee_details</code> table reference
     */
    public EmployeeDetails() {
        this(DSL.name("employee_details"), null);
    }

    /**
     * Create an aliased <code>public.employee_details</code> table reference
     */
    public EmployeeDetails(String alias) {
        this(DSL.name(alias), EMPLOYEE_DETAILS);
    }

    /**
     * Create an aliased <code>public.employee_details</code> table reference
     */
    public EmployeeDetails(Name alias) {
        this(alias, EMPLOYEE_DETAILS);
    }

    private EmployeeDetails(Name alias, Table<EmployeeDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeDetails(Name alias, Table<EmployeeDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmployeeDetails(Table<O> child, ForeignKey<O, EmployeeDetailsRecord> key) {
        super(child, key, EMPLOYEE_DETAILS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEE_DETAILS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeeDetailsRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_DETAILS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeeDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeDetailsRecord>>asList(Keys.EMPLOYEE_DETAILS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeDetails as(String alias) {
        return new EmployeeDetails(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeDetails as(Name alias) {
        return new EmployeeDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeDetails rename(String name) {
        return new EmployeeDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeDetails rename(Name name) {
        return new EmployeeDetails(name, null);
    }
}
