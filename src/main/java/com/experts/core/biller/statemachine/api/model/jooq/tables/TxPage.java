/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.model.jooq.tables;


import com.experts.core.biller.statemachine.api.model.jooq.Indexes;
import com.experts.core.biller.statemachine.api.model.jooq.Keys;
import com.experts.core.biller.statemachine.api.model.jooq.Public;
import com.experts.core.biller.statemachine.api.model.jooq.tables.records.TxPageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxPage extends TableImpl<TxPageRecord> {

    private static final long serialVersionUID = -1722671486;

    /**
     * The reference instance of <code>public.tx_page</code>
     */
    public static final TxPage TX_PAGE = new TxPage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxPageRecord> getRecordType() {
        return TxPageRecord.class;
    }

    /**
     * The column <code>public.tx_page.id</code>.
     */
    public final TableField<TxPageRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tx_page.isadminpage</code>.
     */
    public final TableField<TxPageRecord, Boolean> ISADMINPAGE = createField("isadminpage", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.tx_page.isreadwriteable</code>.
     */
    public final TableField<TxPageRecord, Boolean> ISREADWRITEABLE = createField("isreadwriteable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.tx_page.isreadable</code>.
     */
    public final TableField<TxPageRecord, Boolean> ISREADABLE = createField("isreadable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.tx_page.page_name</code>.
     */
    public final TableField<TxPageRecord, String> PAGE_NAME = createField("page_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tx_page.page_url</code>.
     */
    public final TableField<TxPageRecord, String> PAGE_URL = createField("page_url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.tx_page</code> table reference
     */
    public TxPage() {
        this(DSL.name("tx_page"), null);
    }

    /**
     * Create an aliased <code>public.tx_page</code> table reference
     */
    public TxPage(String alias) {
        this(DSL.name(alias), TX_PAGE);
    }

    /**
     * Create an aliased <code>public.tx_page</code> table reference
     */
    public TxPage(Name alias) {
        this(alias, TX_PAGE);
    }

    private TxPage(Name alias, Table<TxPageRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxPage(Name alias, Table<TxPageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TxPage(Table<O> child, ForeignKey<O, TxPageRecord> key) {
        super(child, key, TX_PAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TX_PAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TxPageRecord> getPrimaryKey() {
        return Keys.TX_PAGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TxPageRecord>> getKeys() {
        return Arrays.<UniqueKey<TxPageRecord>>asList(Keys.TX_PAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxPage as(String alias) {
        return new TxPage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxPage as(Name alias) {
        return new TxPage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxPage rename(String name) {
        return new TxPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxPage rename(Name name) {
        return new TxPage(name, null);
    }
}
