/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.TransactionBatchJobRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionBatchJob extends TableImpl<TransactionBatchJobRecord> {

    private static final long serialVersionUID = -1674263160;

    /**
     * The reference instance of <code>public.transaction_batch_job</code>
     */
    public static final TransactionBatchJob TRANSACTION_BATCH_JOB = new TransactionBatchJob();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionBatchJobRecord> getRecordType() {
        return TransactionBatchJobRecord.class;
    }

    /**
     * The column <code>public.transaction_batch_job.id</code>.
     */
    public final TableField<TransactionBatchJobRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.createddate</code>.
     */
    public final TableField<TransactionBatchJobRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transaction_batch_job.lastmodifiedby</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_batch_job.modifieddate</code>.
     */
    public final TableField<TransactionBatchJobRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.transaction_batch_job.username</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_batch_job.description</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_batch_job.exception</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.transaction_batch_job.success</code>.
     */
    public final TableField<TransactionBatchJobRecord, Boolean> SUCCESS = createField("success", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.name</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.request</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> REQUEST = createField("request", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.response</code>.
     */
    public final TableField<TransactionBatchJobRecord, String> RESPONSE = createField("response", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.version</code>.
     */
    public final TableField<TransactionBatchJobRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transaction_batch_job.transaction_id</code>.
     */
    public final TableField<TransactionBatchJobRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.transaction_batch_job</code> table reference
     */
    public TransactionBatchJob() {
        this(DSL.name("transaction_batch_job"), null);
    }

    /**
     * Create an aliased <code>public.transaction_batch_job</code> table reference
     */
    public TransactionBatchJob(String alias) {
        this(DSL.name(alias), TRANSACTION_BATCH_JOB);
    }

    /**
     * Create an aliased <code>public.transaction_batch_job</code> table reference
     */
    public TransactionBatchJob(Name alias) {
        this(alias, TRANSACTION_BATCH_JOB);
    }

    private TransactionBatchJob(Name alias, Table<TransactionBatchJobRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionBatchJob(Name alias, Table<TransactionBatchJobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionBatchJob(Table<O> child, ForeignKey<O, TransactionBatchJobRecord> key) {
        super(child, key, TRANSACTION_BATCH_JOB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTION_BATCH_JOB_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionBatchJobRecord> getPrimaryKey() {
        return Keys.TRANSACTION_BATCH_JOB_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionBatchJobRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionBatchJobRecord>>asList(Keys.TRANSACTION_BATCH_JOB_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionBatchJobRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionBatchJobRecord, ?>>asList(Keys.TRANSACTION_BATCH_JOB__FKG4UOL4NSBYSB5M3GWOPUJXH4D);
    }

    public TransactionsCreations transactionsCreations() {
        return new TransactionsCreations(this, Keys.TRANSACTION_BATCH_JOB__FKG4UOL4NSBYSB5M3GWOPUJXH4D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionBatchJob as(String alias) {
        return new TransactionBatchJob(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionBatchJob as(Name alias) {
        return new TransactionBatchJob(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionBatchJob rename(String name) {
        return new TransactionBatchJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionBatchJob rename(Name name) {
        return new TransactionBatchJob(name, null);
    }
}
