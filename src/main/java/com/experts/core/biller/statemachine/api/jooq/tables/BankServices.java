/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.jooq.tables;


import com.experts.core.biller.statemachine.api.jooq.Indexes;
import com.experts.core.biller.statemachine.api.jooq.Keys;
import com.experts.core.biller.statemachine.api.jooq.Public;
import com.experts.core.biller.statemachine.api.jooq.tables.records.BankServicesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankServices extends TableImpl<BankServicesRecord> {

    private static final long serialVersionUID = -377147673;

    /**
     * The reference instance of <code>public.bank_services</code>
     */
    public static final BankServices BANK_SERVICES = new BankServices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankServicesRecord> getRecordType() {
        return BankServicesRecord.class;
    }

    /**
     * The column <code>public.bank_services.id</code>.
     */
    public final TableField<BankServicesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.bank_services.createddate</code>.
     */
    public final TableField<BankServicesRecord, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bank_services.lastmodifiedby</code>.
     */
    public final TableField<BankServicesRecord, String> LASTMODIFIEDBY = createField("lastmodifiedby", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_services.modifieddate</code>.
     */
    public final TableField<BankServicesRecord, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bank_services.username</code>.
     */
    public final TableField<BankServicesRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_services.arabic_name</code>.
     */
    public final TableField<BankServicesRecord, String> ARABIC_NAME = createField("arabic_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.bank_services.arabic_short_name</code>.
     */
    public final TableField<BankServicesRecord, String> ARABIC_SHORT_NAME = createField("arabic_short_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_services.catogrey</code>.
     */
    public final TableField<BankServicesRecord, byte[]> CATOGREY = createField("catogrey", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.bank_services.cost</code>.
     */
    public final TableField<BankServicesRecord, Integer> COST = createField("cost", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.bank_services.end_date</code>.
     */
    public final TableField<BankServicesRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.bank_services.english_name</code>.
     */
    public final TableField<BankServicesRecord, String> ENGLISH_NAME = createField("english_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.bank_services.english_short_name</code>.
     */
    public final TableField<BankServicesRecord, String> ENGLISH_SHORT_NAME = createField("english_short_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.bank_services.name</code>.
     */
    public final TableField<BankServicesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.bank_services.start_date</code>.
     */
    public final TableField<BankServicesRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.bank_services.version</code>.
     */
    public final TableField<BankServicesRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.bank_services</code> table reference
     */
    public BankServices() {
        this(DSL.name("bank_services"), null);
    }

    /**
     * Create an aliased <code>public.bank_services</code> table reference
     */
    public BankServices(String alias) {
        this(DSL.name(alias), BANK_SERVICES);
    }

    /**
     * Create an aliased <code>public.bank_services</code> table reference
     */
    public BankServices(Name alias) {
        this(alias, BANK_SERVICES);
    }

    private BankServices(Name alias, Table<BankServicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankServices(Name alias, Table<BankServicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BankServices(Table<O> child, ForeignKey<O, BankServicesRecord> key) {
        super(child, key, BANK_SERVICES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BANK_SERVICES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankServicesRecord> getPrimaryKey() {
        return Keys.BANK_SERVICES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankServicesRecord>> getKeys() {
        return Arrays.<UniqueKey<BankServicesRecord>>asList(Keys.BANK_SERVICES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankServices as(String alias) {
        return new BankServices(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankServices as(Name alias) {
        return new BankServices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankServices rename(String name) {
        return new BankServices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankServices rename(Name name) {
        return new BankServices(name, null);
    }
}
