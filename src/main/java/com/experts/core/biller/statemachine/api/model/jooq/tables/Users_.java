/*
 * This file is generated by jOOQ.
 */
package com.experts.core.biller.statemachine.api.model.jooq.tables;


import com.experts.core.biller.statemachine.api.model.jooq.Indexes;
import com.experts.core.biller.statemachine.api.model.jooq.Keys;
import com.experts.core.biller.statemachine.api.model.jooq.Public;
import com.experts.core.biller.statemachine.api.model.jooq.tables.records.Users_Record;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users_ extends TableImpl<Users_Record> {

    private static final long serialVersionUID = -922638554;

    /**
     * The reference instance of <code>public.users_</code>
     */
    public static final Users_ USERS_ = new Users_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Users_Record> getRecordType() {
        return Users_Record.class;
    }

    /**
     * The column <code>public.users_.id</code>.
     */
    public final TableField<Users_Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_.createddate</code>.
     */
    public final TableField<Users_Record, Timestamp> CREATEDDATE = createField("createddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.users_.modifieddate</code>.
     */
    public final TableField<Users_Record, Timestamp> MODIFIEDDATE = createField("modifieddate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.users_.username</code>.
     */
    public final TableField<Users_Record, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users_.blocked</code>.
     */
    public final TableField<Users_Record, Boolean> BLOCKED = createField("blocked", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.users_.enabled</code>.
     */
    public final TableField<Users_Record, Boolean> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.users_.password</code>.
     */
    public final TableField<Users_Record, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.users_</code> table reference
     */
    public Users_() {
        this(DSL.name("users_"), null);
    }

    /**
     * Create an aliased <code>public.users_</code> table reference
     */
    public Users_(String alias) {
        this(DSL.name(alias), USERS_);
    }

    /**
     * Create an aliased <code>public.users_</code> table reference
     */
    public Users_(Name alias) {
        this(alias, USERS_);
    }

    private Users_(Name alias, Table<Users_Record> aliased) {
        this(alias, aliased, null);
    }

    private Users_(Name alias, Table<Users_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Users_(Table<O> child, ForeignKey<O, Users_Record> key) {
        super(child, key, USERS_);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS__PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Users_Record> getPrimaryKey() {
        return Keys.USERS__PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Users_Record>> getKeys() {
        return Arrays.<UniqueKey<Users_Record>>asList(Keys.USERS__PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users_ as(String alias) {
        return new Users_(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users_ as(Name alias) {
        return new Users_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users_ rename(String name) {
        return new Users_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users_ rename(Name name) {
        return new Users_(name, null);
    }
}
